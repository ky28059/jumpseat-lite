generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Friend {
  id        Int      @id @default(autoincrement())
  userId1   Int
  userId2   Int
  createdAt DateTime @default(now())
  user1     User     @relation("friends_userId1Tousers", fields: [userId1], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user2     User     @relation("friends_userId2Tousers", fields: [userId2], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model User {
  id            Int        @id @default(autoincrement())
  email         String     @unique
  password      String
  isVerified    Boolean    @default(false)
  isAdmin       Boolean    @default(false)
  firstName     String?
  lastName      String?
  createdAt     DateTime   @default(now())
  airports      String[]
  schoolID      Int?
  personalEmail String     @default("")
  blogs         BlogPost[]
  friends1      Friend[]   @relation("friends_userId1Tousers")
  friends2      Friend[]   @relation("friends_userId2Tousers")
  school        School?    @relation(fields: [schoolID], references: [id])
}

model VerificationToken {
  id      Int      @id @default(autoincrement())
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
}

model BlogPost {
  id        String       @id
  title     String
  image     String
  preview   String       @default("")
  content   String
  category  BlogCategory @default(Travel)
  createdAt DateTime     @default(now())
  authorId  Int?
  author    User?        @relation(fields: [authorId], references: [id])
}

model School {
  id           Int               @id @default(autoincrement())
  schoolName   String            @unique
  airportIatas String[]
  breaks       Break[]
  shuttles     ShuttleProvider[]
  users        User[]
}

model Break {
  id        Int       @id @default(autoincrement())
  schoolID  Int
  breakType BreakType
  startDate DateTime  @db.Date
  endDate   DateTime  @db.Date
  school    School    @relation(fields: [schoolID], references: [id])
}

model ShuttleProvider {
  id           Int           @id @default(autoincrement())
  name         String
  iconUrl      String?
  bookingUrl   String
  schoolID     Int
  school       School        @relation(fields: [schoolID], references: [id])
  shuttleTimes ShuttleTime[]

  @@unique([name, schoolID])
}

model ShuttleTime {
  id          Int             @id @default(autoincrement())
  depTime     DateTime        @db.Time(6)
  arrTime     DateTime        @db.Time(6)
  providerID  Int
  direction   Direction
  airport     String
  price       Int
  depTimeZone String          @default("America/Indianapolis")
  arrTimeZone String          @default("America/Indianapolis")
  // operationalDOW DayOfWeek[]     @default([])
  provider    ShuttleProvider @relation(fields: [providerID], references: [id])
}

enum BlogCategory {
  Tech
  Travel
  Startup
}

enum BreakType {
  Spring
  Summer
  Fall
  Winter
  Thanksgiving
}

enum Direction {
  fromSchool
  toSchool
}

enum DayOfWeek {
  Sun
  Mon
  Tue
  Wed
  Thu
  Fri
  Sat
}
